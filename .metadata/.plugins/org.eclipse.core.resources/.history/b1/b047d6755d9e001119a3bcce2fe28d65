import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * 
 * @author Marten Schilstra <info@martndemus.nl>
 */
public class GMLDocument {

	private Document _GMLDocument;
	private Document _GMLDocTree;
	
	/**
	 * Deze constructor initialiseert het GMLDocument object en leest en parsed het bestand.
	 * 
	 * @param file
	 * 		Pad naar het bestand dat geopend moet worden. 
	 */
	public GMLDocument(String file) {
		File GMLFile = new File(file);	
		System.out.println(GMLFile.getAbsolutePath());
		try {
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			_GMLDocument = db.parse(GMLFile);
			_GMLDocTree = db.newDocument();
			
			Node root = _GMLDocTree.createElement("root");
			_GMLDocTree.appendChild(root);
			
			normalize(_GMLDocument.getFirstChild());
			printDoc(_GMLDocument.getFirstChild(), 0);
		} catch (Exception e) {
			System.out.println("Failed");
			e.printStackTrace();
		}		
	}
	
	private void buildDocumentTree(Node docNode, Node treeNode) {
		NodeList exist = _GMLDocTree.getElementsByTagName(node.getNodeName());
		if ( exist != null) {
			
		} else {
			
		}
	}
	
	public void normalize(Node node) {
		if (node.hasChildNodes()) {
			NodeList children = node.getChildNodes();
			
			for (int i = 0; i < children.getLength(); i++) {
				normalize(children.item(i));
			}
		} else {
			normalizeEmpty(node);
			normalizeNum(node);			
		}
	}
	
	private void normalizeEmpty(Node node) {
		if (node.getNodeValue().matches(" ") || node.getNodeValue().matches("-")) {				
			node.setNodeValue(null);
		}
	}
	
	private void normalizeNum(Node node) {
		if (node.getNodeValue() == null) {
			return;
		}
		
		byte val[] = node.getNodeValue().getBytes();
		
		for (int i = 0; i < val.length; i++) {
			if (val[i] >= 48 && val[i] <= 57) {
				continue;
			} else if (val[i] == 44) {
				val[i] = 46;
			} else {
				return;
			}
		}
		
		node.setNodeValue(new String(val));
	}
	
	private void printDoc(Node node, int depth) {
		String dtabs = "";
		
		for (int i = 0; i < depth; i++) {
			dtabs += "  ";
		}
		
		if (node.hasChildNodes() && node.getFirstChild().getNodeName() != "#text") {
			System.out.println(dtabs + "\"" + node.getNodeName() + "\" : {");
			
			NodeList children = node.getChildNodes();
			
			for (int i = 0; i < children.getLength(); i++) {
				printDoc(children.item(i), depth + 1);
			}
			
			if (node.getNextSibling() != null) {
				System.out.print(dtabs + "},\n");
			} else {
				System.out.print(dtabs + "}\n");
			}
			
		} else {
			System.out.print(dtabs + "\"" + node.getNodeName() + "\" : \"" + node.getTextContent() + "\"" );
			
			if (node.getNextSibling() != null) {
				System.out.print(",");
			}
			
			System.out.print("\n");
		}
	}
}
