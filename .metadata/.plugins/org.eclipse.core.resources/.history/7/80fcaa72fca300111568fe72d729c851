import java.io.File;
import java.util.Hashtable;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * 
 * @author Marten Schilstra <info@martndemus.nl>
 */
public class app_start {

	private static Document _GMLDocument;
	private static NodeList _DataList;
	private static Hashtable<String, String> _ColumnRenameTable;
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		initRenameTable();
		
		System.out.println(args[0]);
		
		File GMLFile = new File(args[0]);	
		try {
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			_GMLDocument = db.parse(GMLFile);  
			
			//printDoc(_GMLDocument.getFirstChild(), 0);
		} catch (Exception e) {
			System.out.println("Failed");
			e.printStackTrace();
		}
		
		if (_GMLDocument != null) {
			_DataList = _GMLDocument.getElementsByTagName("gml:coordinates");
			
			for (int i = 1; i < _DataList.getLength(); i++) {
				convertCoords(_DataList.item(i).getFirstChild());
			}
			
			
		}

	}
	
	private static void initRenameTable() {
		_ColumnRenameTable = new Hashtable<String, String>();
		
		// Renames voor bruggen.gml
		// 						Oude Naam	-->		Niewe Naam
		_ColumnRenameTable.put("PGR:TYPE", 			"BRIDGETYPE");
		_ColumnRenameTable.put("PGR:HOOGTE", 		"HEIGHT");
		_ColumnRenameTable.put("PGR:BREEDTE", 		"WIDTH");
		_ColumnRenameTable.put("PGR:NAAM_KUNST", 	"NAME");
		_ColumnRenameTable.put("PGR:KRUISING_L", 	"ADRESS");
		_ColumnRenameTable.put("PGR:NAAM_VAARW", 	"title");   // verplicht lowercase
		_ColumnRenameTable.put("PGR:TYPE", 			"BRIDGETYPE");
		_ColumnRenameTable.put("PGR:OPMERKINGE", 	"DESCRIPTION");
		_ColumnRenameTable.put("PGR:ASP_FOTO", 		"PICTURE");
		_ColumnRenameTable.put("PGR:OPMERKINGE", 	"DESCRIPTION");
		_ColumnRenameTable.put("PGR:BRON_GEGEV", 	"SOURCE");
		
	}
	
	private static void convertCoords(Node node) {
		//151127.70219999924,533378.26410000026 229205.30539999902,603020.20699999854
		//135185.62159999833,536856.49309999868 214101.42449999973,609514.93189999834
		
		double x = Double.parseDouble(node.getNodeValue().split(",")[0]);
		double y = Double.parseDouble(node.getNodeValue().split(",")[1]);
		
		double dx = (x - 155000) / 100000;
		double dy = (y - 463000) / 100000;
		
		double LAT = 52.1551744 + (3235.65389 * dy - 32.58297 * Math.pow(dx, 2) - 0.2475f * Math.pow(dy, 2) - 0.84978 * Math.pow(dx, 2) * dy - 0.0655 * Math.pow(dy, 3) - 0.01709 * Math.pow(dx, 2) * Math.pow(dy, 2) - 0.00738 * dx + 0.0053 * Math.pow(dx, 4) - 0.00039 * Math.pow(dx, 2) * Math.pow(dy, 3) + 0.00033 * Math.pow(dx, 4) * dy - 0.00012 * dx * dy) / 3600; 
		double LONG = 5.38720621 + (5260.52916 * dx + 105.94684 * dx * dy + 2.45656 * dx * Math.pow(dy, 2) - 0.81885 * Math.pow(dx, 3) + 0.05594 * dx * Math.pow(dy, 3) - x * Math.pow(dx, 3) * dy + 0.001199 * dy - 0.00256 * Math.pow(dx, 3) * Math.pow(dy, 2) + 0.00128 * dx * Math.pow(dy, 4) + 0.00022 * Math.pow(dy, 2) - 0.00022 * Math.pow(dx, 2) + 0.00026 * Math.pow(dx, 5)) / 3600;
		
		System.out.println("x: " + x + "\t\ty: " + y + "\t\tLat: " + LAT + "\t\tLong: " + LONG);
	}
	
	private static void printDoc(Node node, int depth) {
		String dtabs = "";
		
		for (int i = 0; i < depth; i++) {
			dtabs += "  ";
		}
		
		if (node.hasChildNodes() && node.getFirstChild().getNodeName() != "#text") {
			System.out.println(dtabs + "\"" + node.getNodeName() + "\" : {");
			
			NodeList children = node.getChildNodes();
			
			for (int i = 0; i < children.getLength(); i++) {
				printDoc(children.item(i), depth + 1);
			}
			
			if (node.getNextSibling() != null) {
				System.out.print(dtabs + "},\n");
			} else {
				System.out.print(dtabs + "}\n");
			}
			
		} else {
			System.out.print(dtabs + "\"" + node.getNodeName() + "\" : \"" + node.getTextContent() + "\"" );
			
			if (node.getNextSibling() != null) {
				System.out.print(",");
			}
			
			System.out.print("\n");
		}
	}

}